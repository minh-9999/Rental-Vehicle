name: C++ CI/CD with GitHub Releases

on:
  push:
    branches: [dev, main] # Run CI on push to dev or main
    tags: ["v*.*.*"] # Trigger release workflow on version tag
  pull_request:
    branches: [main] # Run CI on pull requests to main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install dependencies per platform
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install -y cmake ninja-build llvm build-essential

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install -y cmake ninja llvm

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake ninja llvm

      # Lint using clang-format
      - name: Style check (clang-format)
        run: clang-format --dry-run --Werror $(find . -name '*.cpp' -o -name '*.h')

      # Configure and build project
      - name: Configure & Build
        run: |
          mkdir build && cd build
          cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      # Run unit tests
      - name: Run Unit Tests
        run: cd build && ctest -R "Unit" --output-on-failure

      # Run integration tests
      - name: Run Integration Tests
        run: cd build && ctest -R "Integration" --output-on-failure

      # Upload test results (optional)
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.os }}
          path: build/logs/

      # Package the binary into a .tar.gz
      - name: Package Binary (.tar.gz)
        run: |
          mkdir -p package
          cp build/Rental-Vehicle* package/
          tar -czf Rental-Vehicle-${{ matrix.os }}.tar.gz -C package .
        shell: bash

      # Upload packaged binary as artifact
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Rental-Vehicle-${{ matrix.os }}
          path: Rental-Vehicle-${{ matrix.os }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on version tags like v1.0.0

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Show downloaded files
        run: ls -R artifacts

      # Create a GitHub release with artifacts and changelog
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: artifacts/Rental-Vehicle-*/Rental-Vehicle-*.tar.gz
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
